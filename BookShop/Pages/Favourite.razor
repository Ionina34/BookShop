@page "/favourite"
@inject IShopRepository shop
@inject NavigationManager Navigation

<style>
    .container {
        display: flex;
        flex-direction: column;
    }

    .book {
        display: flex;
        justify-content: space-between;
        margin: 5px;
    }

    .right {
        display: flex;
        flex-direction: row;
    }

    .img {
        width: 160px;
    }

    .info {
        font-size: 20px;
        text-align: center;
    }

    .info-book {
        margin: 10px;
    }

    .price {
        font-weight: bold;
        font-size: 25px;
    }

    .left {
        display: flex;
        flex-direction: column;
        margin-top: 30px;
    }

    .btn {
        display: flex;
        justify-content: space-around;
        margin-top: auto;
        width: 100%;
    }

    .buy {
        padding: 3px 15px;
        border: none;
        background-color: #f3c1f7;
    }

    .arrange {
        padding: 3px 15px;
        border: none;
        background-color: #ec00fc
    }

    .imgFav {
        width: 30px;
    }

    .fav {
        padding: 3px 15px;
        border-width: 1px;
        border-color: #f3c1f7;
        border-style: solid;
        background-color: white;
        margin-right: 5px;
        margin-left: 5px;
    }

    .img-btn {
        border: none;
        background-color: white;
        margin: 19px;
        width: 160px;
        padding: 0px;
    }

</style>

<AuthorizeView>
    @{
        AllIfno(context.User.Identity.Name);
        <div class="container">
            @{
                foreach (var b in favourites)
                {
                    <div class="book">
                        <div class="right">
                             <button class="img-btn"
                                @onclick="@(()=>Navigation.NavigateTo("/book/"+ b.BookId.ToString()))">
                                <img class="img" src="@b.Book.BookImage" />
                            </button>
                            <div class="info-book">
                                <p class="info">@b.Book.Title</p>
                                <p class="info">@b.Book.Author.Name</p>
                            </div>
                        </div>
                        <div class="left">
                            <div>
                                <p class="info price">@b.Book.Price</p>
                            </div>
                            <div class="btn">
                                @{
                                    if (cardItems.Any(p => p.BookId == b.Book.Id))
                                    {
                                        <button class="arrange"
                                        @onclick="@(()=>Navigation.NavigateTo("/card"))">
                                            Оформить
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="buy" @onclick=@(async ()=>
                            await AddToCart(b.Book.Id,context.User.Identity.Name))>
                                            Купить
                                        </button>
                                    }
                                }
                                <button class="fav" @onclick=@(async ()=>
                            await Delete(context.User.Identity.Name,b.Book.Id))>
                                    <img class="imgFav" src="css/Image/Card.png" />
                                </button>
                            </div>
                        </div>
                    </div>
                    <hr>
                }
            }
        </div>
    }
</AuthorizeView>

@code {
    private List<Favourites> favourites = new List<Favourites>();
    private List<CardItem> cardItems = new List<CardItem>();

    private async Task AllIfno(string name)
    {
        favourites = await shop.AllFarourite(name);
        cardItems = await shop.AllCardItem(name);
    }

    private async Task AddToCart(int id, string name)
    {
        await shop.AddToCart(id, name);
    }
    private async Task Delete(string name, int id)
    {
        await shop.DeleteBookInFav(name, id);
    }

    private async Task Plus(string name, int id)
    {
        await shop.Plus(name, id);
    }
    private async Task Minus(string name, int id)
    {
        await shop.Minus(name, id);
    }
}
